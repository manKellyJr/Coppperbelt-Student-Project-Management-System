@page "/groups"
@using ProjectManagementSystem.Models
@using System
@using System.Linq
@using static MudBlazor.CategoryTypes
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<AuthorizeView Context="AuthContext" Roles="Coordinator, Supervisor, Administrator">
    <Authorized>
<h3>Groups</h3>
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Groups</MudText>
            <MudText Typo="Typo.h6">Count: @count</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="group.GroupName" Label="Name Of Group" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudSelect T="int" Label="Select Supervisor" @bind-Value="group.SupervisorId">
            @foreach (var supervisor in supervisors)
            {
                <MudSelectItem T="int" Value="@supervisor.SupervisorId">@supervisor.SupervisorName</MudSelectItem>
            }
        </MudSelect>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Add">Add Group</MudButton>
    </MudCardContent>
</MudCard>
<br />

<MudTable RowsPerPage="5" @ref="@_table" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Style="color: white" Elevation="25" Items="GetAll()" Filter="new Func<Group, bool>(Search)" @bind-group="group">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Course</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Groups..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Group Name</MudTh>
        @*<MudTh>Supervisor</MudTh>*@
        @*<MudTh>Project</MudTh>*@
        @*<MudTh>Students</MudTh>*@
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Group Name">@context.GroupName</MudTd>
        @*<MudTd DataLabel="Supervisor">context.Supervisor.SupervisorName</MudTd>*@
        @*<MudTd DataLabel="Project">
            @if (context.Projects.Any())
            {
                foreach (var projects in context.Projects)
                {
                    <MudSelectItem T="int" Value="@project.ProjectId">@project.ProjectName</MudSelectItem>
                }

            }
        </MudTd>*@
        @*<MudTd DataLabel="Group Members">
            if (context.Students.Any())
            {
                foreach (var students in context.Students)
                {
                    <MudSelectItem T="int" Value="@student.StudentId">@student.StudentName</MudSelectItem>
                }

            }
        </MudTd>*@
        <MudTd DataLabel="Actions">
            <MudFab @onclick="@(()=>Update(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination ShowFirstButton="true" ShowLastButton="true" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
    </PagerContent>
</MudTable>
</Authorized>
</AuthorizeView>

@code {
    private string searchString = "";
    private int count;
    private Group group = new Group();
    private Project project = new Project();
    private Supervisor supervisor = new Supervisor();
    private Student student = new Student();
    private IEnumerable<Group> groups = new List<Group>();
    private IEnumerable<Project> projects = new List<Project>();
    private IEnumerable<Supervisor> supervisors = new List<Supervisor>();
    private IEnumerable<Student> students = new List<Student>();


    protected override async Task OnInitializedAsync()
    {
        supervisors = supervisorService.GetAll();
        students = studentService.GetStudentDetails();
        projects = projectService.GetProjectDetails();
        groups = groupService.GetGroupDetails();
        count = groups.Count();
    }

    private bool Search(Group group)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (group.GroupName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||group.Supervisor.SupervisorName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private IEnumerable<Group> GetAll()
    {
        groups = groupService.GetAll();
        return groups;
    }

    private void Add()
    {
        if(group.GroupId == 0)
        {
            groupService.Add(group);
        }
        else
        {
            groupService.Update(group);
        }
        group = new Group();
        snackBar.Add("Group Added.", Severity.Success);
        GetAll();
    }

    private void Update(Group record)
    {
        group = record;
        StateHasChanged();
    }

    private async Task Delete(Group record)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            groupService.Delete(record);
            snackBar.Add("Group Deleted.", Severity.Success);
            GetAll();
        }
    }

    private MudTable<Group> _table;

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

}
