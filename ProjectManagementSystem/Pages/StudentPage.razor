@page "/students"
@using ProjectManagementSystem.Models
@using System
@using System.Linq
@using static MudBlazor.CategoryTypes
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<AuthorizeView Context="AuthContext" Roles="Coordinator, Supervisor, Administrator">
    <Authorized>
<h3>Students</h3>
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Students</MudText>
            <MudText Typo="Typo.h6">Count: @count</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="student.StudentIDNumber" Label="Student Identity Number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="student.FirstName" Label="First Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="student.LastName" Label="Last Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="student.YearOfStudy" Label="Year of Study" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="email" Label="Email" InputMode="InputMode.email" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudSelect T="int" Label="Select Programme" @bind-Value="student.ProgrammeId">
            @foreach (var programme in programmes)
            {
                <MudSelectItem T="int" Value="@programme.ProgrammeId">@programme.ProgrammeName</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="int" Label="Select Supervisor" @bind-Value="student.SupervisorId">
            @foreach (var supervisor in supervisors)
            {
                <MudSelectItem T="int" Value="@supervisor.SupervisorId">@supervisor.SupervisorName</MudSelectItem>
            }
        </MudSelect>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Add">Add Student</MudButton>
    </MudCardContent>
</MudCard>
<br />

<MudTable RowsPerPage="5" @ref="@_table" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Style="color: white" Elevation="25" Items="GetAll()" Filter="new Func<Student, bool>(Search)" @bind-student="student">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Student</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Student..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>SIN</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Year of Study</MudTh>
        <MudTh>Programme</MudTh>
        <MudTh>Supervisor</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="SIN">@context.StudentIDNumber</MudTd>
        <MudTd DataLabel="SIN">@context.StudentName</MudTd>
        <MudTd DataLabel="Year of Study">@context.YearOfStudy</MudTd>
        <MudTd DataLabel="Programme">@context.Programme.ProgrammeName</MudTd>
        <MudTd DataLabel="Supervisor">@context.Supervisor.SupervisorName</MudTd>
        <MudTd DataLabel="Actions">
            <MudFab @onclick="@(()=>Update(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination ShowFirstButton="true" ShowLastButton="true" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
    </PagerContent>
</MudTable>
</Authorized>
</AuthorizeView>


@code {
    private string searchString = "";
    private int count;
    private Student student = new Student();
    private Programme programme = new Programme();
    private Supervisor supervisor = new Supervisor();
    private IEnumerable<Student> students = new List<Student>();
    private IEnumerable<Programme> programmes = new List<Programme>();
    private IEnumerable<Supervisor> supervisors = new List<Supervisor>();
    string email;

    protected override async Task OnInitializedAsync()
    {
        programmes = programmeService.GetProgrammeDetails();
        supervisors = supervisorService.GetAll();
        students = studentService.GetStudentDetails();
        count = students.Count();
    }

    private bool Search(Student student)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (student.StudentName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||student.Programme.ProgrammeName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||student.StudentIDNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private IEnumerable<Student> GetAll()
    {
        students = studentService.GetAll();
        return students;
    }

    private async void Add()
    {
        var user = new RegisterRequest
            {
                Email = email,
                UserName = student.StudentIDNumber,
                Password = "test1234",
                Role = "Student"

            };
        var id = await userService.AddUser(user);
        if (id > 0)
        {
            student.UserId = id;
            studentService.Add(student);
            student = new Student();
            snackBar.Add("Student Added.", Severity.Success);
            GetAll();
        }
    }

    private void Update(Student record)
    {
        student = record;
        StateHasChanged();
    }

    private async Task Delete(Student record)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            studentService.Delete(record);
            snackBar.Add("Student Deleted.", Severity.Success);
            GetAll();
        }
    }

    private MudTable<Student> _table;

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

}
